@inject IDeleteEventUseCase DeleteEventUseCase
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (this.Event is not null)
{
    <tr>
        <td>@Event.Title</td>
        <td>@Event.Description</td>
        <td>@Event.StartDate.ToShortDateString()</td>
        <td>@Event.EndDate.ToShortDateString()</td>
        <td>@Event.Location</td>
        <td>
            @if (CanEditEvent)
            {
                <a href="/edit-event/@Event.Id" class="btn btn-primary">Edit</a>
            }
        </td>
        <td>
            <a href="/event-details/@Event.Id" class="btn btn-info">Details</a>
        </td>
        @if (CanDeleteEvent)
        {
            <td>
                <EditForm Model="Event"
                          FormName="@($"form-delete")"
                          OnValidSubmit="@(() => DeleteEvent(Event.Id))">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </EditForm>
            </td>
        }
    </tr>
}
@code {
    [Parameter]
    public Event? Event { get; set; }

    private bool CanDeleteEvent { get; set; } = false;
    private bool CanEditEvent { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Перевірка політики для адміністратора
        var adminAuthorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "AdminPolicy");

        // Перевірка політики для організатора
        var organizerAuthorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "OrganizerPolicy");

        // Користувач має доступ, якщо одна з політик дозволяє
        CanDeleteEvent = adminAuthorizationResult.Succeeded;
        CanEditEvent = adminAuthorizationResult.Succeeded || organizerAuthorizationResult.Succeeded;
    }

    private async Task DeleteEvent(int id)
    {
        await DeleteEventUseCase.ExecuteAsync(id);
        NavigationManager.Refresh();
    }
}
