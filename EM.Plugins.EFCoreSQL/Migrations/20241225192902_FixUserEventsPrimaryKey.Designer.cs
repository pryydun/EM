// <auto-generated />
using System;
using EM.Plugins.EFCoreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EM.Plugins.EFCoreSQLServer.Migrations
{
    [DbContext(typeof(EMContext))]
    [Migration("20241225192902_FixUserEventsPrimaryKey")]
    partial class FixUserEventsPrimaryKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EM.CoreBusiness.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tech trends 2024",
                            EndDate = new DateTime(2024, 12, 26, 21, 29, 1, 626, DateTimeKind.Local).AddTicks(3235),
                            Location = "Kyiv",
                            StartDate = new DateTime(2024, 12, 25, 21, 29, 1, 624, DateTimeKind.Local).AddTicks(8211),
                            Title = "Tech Conference"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Modern Art",
                            EndDate = new DateTime(2024, 12, 31, 21, 29, 1, 626, DateTimeKind.Local).AddTicks(3629),
                            Location = "Lviv",
                            StartDate = new DateTime(2024, 12, 30, 21, 29, 1, 626, DateTimeKind.Local).AddTicks(3623),
                            Title = "Art Expo"
                        });
                });

            modelBuilder.Entity("EM.CoreBusiness.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Name = "Alice"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Name = "Bob"
                        });
                });

            modelBuilder.Entity("EM.CoreBusiness.UserEvents", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EventId = 1
                        },
                        new
                        {
                            UserId = 2,
                            EventId = 1
                        });
                });

            modelBuilder.Entity("EM.CoreBusiness.UserEvents", b =>
                {
                    b.HasOne("EM.CoreBusiness.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EM.CoreBusiness.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EM.CoreBusiness.Event", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("EM.CoreBusiness.User", b =>
                {
                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
