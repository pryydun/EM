@page "/add-event"
@attribute [Authorize(Policy = "OrganizerOrAdminPolicy")]
@using EM.CoreBusiness
@using EM.WebApp.Components.Pages.ViewModel
 
@inject IAddEventsUseCase AddEventsUseCase
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment _webHostEnvironment
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<h3>Add Event</h3>

 
<div class="container p-5" style="max-width: 600px; margin: 0 auto; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
     
    <EditForm Model="newEvent" OnValidSubmit="Save" FormName="AddEventForm">
        <DataAnnotationsValidator />

        <div class="form-group mb-3">
            <label for="eventTitle" style="font-weight: bold; color: #555;">Event Title</label>
            <InputText id="eventTitle" @bind-Value="newEvent.Title" class="form-control" style="border: 1px solid #ddd; border-radius: 6px;" />
            <ValidationMessage For="@(() => newEvent.Title)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="eventDescription" style="font-weight: bold; color: #555;">Event Description</label>
            <InputTextArea id="eventDescription" @bind-Value="newEvent.Description" class="form-control" style="border: 1px solid #ddd; border-radius: 6px;" />
            <ValidationMessage For="@(() => newEvent.Description)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="eventStartDate" style="font-weight: bold; color: #555;">Start Date</label>
            <InputDate id="eventStartDate" @bind-Value="newEvent.StartDate" class="form-control" style="border: 1px solid #ddd; border-radius: 6px;" />
            <ValidationMessage For="@(() => newEvent.StartDate)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="eventEndDate" style="font-weight: bold; color: #555;">End Date</label>
            <InputDate id="eventEndDate" @bind-Value="newEvent.EndDate" class="form-control" style="border: 1px solid #ddd; border-radius: 6px;" />
            <ValidationMessage For="@(() => newEvent.EndDate)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="eventLocation" style="font-weight: bold; color: #555;">Location</label>
            <InputText id="eventLocation" @bind-Value="newEvent.Location" class="form-control" style="border: 1px solid #ddd; border-radius: 6px;" />
            <ValidationMessage For="@(() => newEvent.Location)" class="text-danger" />
        </div>

        <div class="form-group mb-3">
            <label for="eventImage" style="font-weight: bold; color: #555;">Event Image</label>
            <InputFile id="eventImage" OnChange="UploadImage" class="form-control" style="border: 1px solid #ddd; border-radius: 6px;" />
        </div>

        <div class="d-flex justify-content-between">
            <button type="submit" class="btn" style="background-color: #007bff; color: white; border-radius: 6px; padding: 10px 20px;">Save</button>
            <a href="/events" class="btn" style="background-color: #6c757d; color: black; border-radius: 6px; padding: 10px 20px;">Cancel</a>
        </div>
    </EditForm>
</div>
 

@code {
    [SupplyParameterFromForm]
    private EventViewModel newEvent { get; set; } = new EventViewModel();
    private string? imagePath;
    private string? directoryPath;




    private async Task UploadImage(InputFileChangeEventArgs e)
    {


        var file = e.File;


        Console.WriteLine($"File name: {file.Name}, Size: {file.Size}");

        var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
        var directoryPath = Path.Combine("wwwroot", "uploads");
        var filePath = Path.Combine(directoryPath, uniqueFileName);

        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        using var fileStream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fileStream);

        imagePath = $"/uploads/{uniqueFileName}";
        Console.WriteLine($"Image uploaded successfully: {imagePath}");


    }
    private async Task Save()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            // Отримання ідентифікатора користувача
            var organizerId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            var ev = new Event
                {
                    Id = newEvent.Id,
                    Title = newEvent.Title,
                    Description = newEvent.Description,
                    StartDate = newEvent.StartDate,
                    EndDate = newEvent.EndDate,
                    Location = newEvent.Location,
                    ImagePath = imagePath,
                    OrganizerId = organizerId
                };

            await AddEventsUseCase.ExecuteAsync(ev);
            NavigationManager.NavigateTo("/events");
        } }
}







 