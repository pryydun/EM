@inject IDeleteEventUseCase DeleteEventUseCase
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (this.Event is not null)
{
    <tr>
        <td>@Event.Title</td>
        <td>@Event.StartDate.ToShortDateString()</td>
        <td>@Event.EndDate.ToShortDateString()</td>
        <td>@Event.Location</td>
        <td class="d-flex justify-content-center align-items-center gap-2">
            @if (CanEditEvent)
            {
                <a href="/edit-event/@Event.Id" class="btn btn-outline-success btn-sm d-flex align-items-center gap-1">
                    <i class="bi bi-pencil-fill"></i> Edit
                </a>
            }
            <a href="/event-details/@Event.Id" class="btn btn-outline-primary btn-sm d-flex align-items-center gap-1">
                <i class="bi bi-info-circle-fill"></i> Details
            </a>
            @if (CanDeleteEvent)
            {
                <EditForm Model="Event"
                          FormName="@($"form-delete-event-{Event.Id}")"
                          OnValidSubmit="@(() => DeleteEvent(Event.Id))">
                    <button type="submit" class="btn btn-outline-danger btn-sm d-flex align-items-center gap-1">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </EditForm>
            }
        </td>
    </tr>
}

@code {
    [Parameter]
    public Event? Event { get; set; }
    private bool CanEditEvent { get; set; } = false;
    private bool CanDeleteEvent { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Перевірка політики для адміністратора
        var adminAuthorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "AdminPolicy");

        // Перевірка політики для організатора
        var organizerAuthorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "OrganizerPolicy");

        // Якщо користувач — адміністратор
        if (adminAuthorizationResult.Succeeded)
        {
            CanEditEvent = true;
            CanDeleteEvent = true;
        }
        // Якщо користувач — організатор і є власником події
        else if (organizerAuthorizationResult.Succeeded && Event != null)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId) && Event.OrganizerId == userId)
            {
                CanEditEvent = true;
                CanDeleteEvent = true;
            }
        }
    }

    private async Task DeleteEvent(int id)
    {
        await DeleteEventUseCase.ExecuteAsync(id);
        NavigationManager.Refresh();
    }
}
