@page "/users"
@using EM.WebApp.Components.Pages.ViewModel
@using EM.WebApp.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IRemoveUserEventsUseCase RemoveUserEventsUseCase
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
<h3>All Users</h3>

@if (UserList == null)

{
    <p>Loading...</p>
}

else if (!UserList.Any())

{
    <p>No users found.</p>
}

else

{
    <EditForm Model="searchFilter" FormName="Search" OnValidSubmit="Search">
        <div class="input-group mb-3">
            <InputText class="form-control"
                       placeholder="Search by name or email..."
                       @bind-Value="searchFilter"
                       @oninput="Search"
                       style="border-right: none; border-radius: 8px 0 0 8px;">
            </InputText>
            <button type="submit" class="btn input-group-text"
                    style="background-color: #28a745; color: white; border: none; border-radius: 0 8px 8px 0;">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </EditForm>

    <table class="table table-striped table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in FilteredUserList)

            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td class="text-center">
                        <div class="btn-group gap-3" role="group">
                            <a href="/user-profile/@user.Id" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-person"></i> Profile
                            </a>
                            @if (IsAdminUser)
                            {
                                <a href="/create-notification/@user.Id" class="btn btn-outline-secondary btn-sm">
                                    <i class="bi bi-chat"></i> Notify
                                </a>
                                <EditForm Model="user"
                                          FormName="@($"form-delete-user-{user.Id}")"
                                          OnValidSubmit="@(() => DeleteUser(user.Id))">
                                    <button type="submit" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </EditForm>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserViewModel> UserList = new();

    private List<UserViewModel> FilteredUserList = new();

    private string searchFilter = string.Empty;

    private bool IsAdminUser;



    protected override async Task OnInitializedAsync()

    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;



        IsAdminUser = user.HasClaim(c => c.Type == "role" && c.Value == "Admin");



        UserList = await DbContext.Users

            .Select(u => new UserViewModel

                {

                    Id = u.Id,

                    Name = u.Name,

                    Email = u.Email

                })

            .ToListAsync();



        FilteredUserList = UserList;

    }



    private void Search()

    {

        FilteredUserList = UserList.Where(user =>

            user.Name.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||

            user.Email.Contains(searchFilter, StringComparison.OrdinalIgnoreCase))

            .ToList();

    }



    private async Task DeleteUser(string userId)

    {

        await RemoveUserEventsUseCase.ExecuteAsync(userId);



        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);



        if (user != null)

        {

            DbContext.Users.Remove(user);

            await DbContext.SaveChangesAsync();

        }



        UserList = await DbContext.Users

            .Select(u => new UserViewModel

                {

                    Id = u.Id,

                    Name = u.UserName,

                    Email = u.Email

                })

            .ToListAsync();



        FilteredUserList = UserList;

    }
}
