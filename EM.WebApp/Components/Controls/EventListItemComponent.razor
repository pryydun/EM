@inject IDeleteEventUseCase DeleteEventUseCase
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@if (this.Event is not null)
{
        <tr>
            <td>@Event.Title</td>
            <td>@Event.Description</td>
            <td>@Event.StartDate.ToShortDateString()</td>
            <td>@Event.EndDate.ToShortDateString()</td>
            <td>@Event.Location</td>
            <td class="d-flex justify-content-center align-items-center gap-2">

            @if (CanDeleteEditEvent)
            {
                <a href="/edit-event/@Event.Id" class="btn btn-primary btn-sm">Edit</a>
            }
                <a href="/event-details/@Event.Id" class="btn btn-info btn-sm">Details</a>
            @if (CanDeleteEditEvent)
            {
                        <EditForm Model="Event"
                                  FormName="@($"form-delete-event-{Event.Id}")"
                                  OnValidSubmit="@(() => DeleteEvent(Event.Id))">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </EditForm>
            }
            </td>
        </tr>
}
@code {
    [Parameter]
    public Event? Event { get; set; }
    private bool CanDeleteEditEvent { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Перевірка політики для адміністратора
        var adminAuthorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "AdminPolicy");

        // Перевірка політики для організатора
        var organizerAuthorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "OrganizerPolicy");

        // Користувач має доступ, якщо одна з політик дозволяє
        CanDeleteEditEvent = adminAuthorizationResult.Succeeded || organizerAuthorizationResult.Succeeded;
    }




    private async Task DeleteEvent(int id)
    {

        await DeleteEventUseCase.ExecuteAsync(id);

        NavigationManager.Refresh();

    }
}