 
@inject IDeleteReviewUseCase DeleteReviewUseCase
@inject IGetReviewsByEventIdUseCase GetReviewsByEventIdUseCase
@inject NavigationManager NavigationManager
 
 
<details style="background-color: #f9f6fc; border-radius: 10px; box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); margin-bottom: 1rem; padding: 10px;">
    <summary style="background-color: #6c47a5; color: white; font-weight: bold; font-size: 1.2rem; text-shadow: 0 2px 5px rgba(58, 35, 110, 0.5); padding: 10px; border-radius: 8px; cursor: pointer;">
        Reviews
    </summary>
    <div style="padding: 10px;">
        @if (Reviews.Any())
        {
            <ul class="list-group" style="background-color: #f9f6fc; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                @foreach (var review in Reviews)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center"
                        style="border-bottom: 1px solid #d3bce8; padding: 15px; background-color: #fff; border-radius: 8px; margin-bottom: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                        <div>
                            <strong style="color: #6c47a5; font-size: 1.1rem;">@review.UserName</strong>
                            <div style="margin-top: 5px;">
                                @for (int i = 0; i < 5; i++)
                                {
                                    if (i < review.Rating)
                                    {
                                        <span class="text-warning" style="font-size: 1.2rem;">&#9733;</span> 
                                    }
                                    else
                                    {
                                        <span class="text-secondary" style="font-size: 1.2rem;">&#9734;</span>  
                                    }
                                }
                            </div>
                            <p style="margin-top: 10px; color: #333; font-size: 1rem;">@review.Comment</p>
                        </div>
                        @if (CanDeleteReview)
                        {
                            <EditForm Model="review"
                                      FormName="@($"form-delete-review-{review.Id}")"
                                      OnValidSubmit="@(() => HandleDeleteReview(review.Id))">
                                <button type="submit" class="btn btn-outline-danger btn-sm"
                                        style="border-radius: 5px; padding: 5px 10px; transition: background-color 0.3s, color 0.3s;">
                                    Delete
                                </button>
                            </EditForm>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p style="color: #6c47a5; font-size: 1rem; text-align: center;">No reviews available for this event.</p>
        }
    </div>
</details>


@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public List<Review> Reviews { get; set; } = new();

    [Parameter]
    public bool CanDeleteReview { get; set; } = false;

    [Parameter]
    public EventCallback<int> OnDeleteReview { get; set; }


    private async Task HandleDeleteReview(int reviewId)
    {
        await DeleteReviewUseCase.ExecuteAsync(reviewId);
        Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);
         
    }
}
