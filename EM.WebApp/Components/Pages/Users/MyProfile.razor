 @page "/my-profile"
@using EM.WebApp.Components.Pages.ViewModel
@using EM.WebApp.Data
@using EM_UseCases.PluginInterfaces
@using Microsoft.EntityFrameworkCore
@inject IUserEventRepository UserEventRepository
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUnregisterUserFromEventUseCase UnregisterUserFromEventUseCase
@inject IEventRepository EventRepository
@rendermode InteractiveServer
 
<h3 class="mb-4 text-center" style="color: #3a236e; text-shadow: 0 2px 5px rgba(108, 71, 165, 0.7); font-weight: bold;">My Profile</h3>

@if (User == null)
{
    <div class="text-center">
        <p class="text-muted">You are not logged in.</p>
        <a href="/Account/Login" class="btn btn-primary mt-3">
            <i class="bi bi-box-arrow-in-right"></i> Login
        </a>
    </div>
}
else
{
    <div class="d-flex flex-wrap gap-4" style="background-color: #fde8f7; border-radius: 10px; padding: 20px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);">
        <!-- Ліва частина: Інформація про користувача -->
        <div style="flex: 1; color: #3a236e;">
            <h4 class="mb-2" style="color: #6c47a5; font-size: 1.8rem; font-weight: bold;">@User.Name</h4>
            <p style="font-size: 1.2rem;"><strong>Email:</strong> @User.Email</p>
            <p style="font-size: 1.2rem;"><strong>Role:</strong> @UserRole</p>
            <div class="btn-container d-flex gap-3 mt-3">
            <a href="/Account/Manage" class="btn btn-outline-primary mt-3">
                <i class="bi bi-gear"></i> Manage Profile

            </a>

                <a href="/notifications" class="btn btn-outline-success mt-3">
                
                <i class="bi bi-bell"></i> Notifications
            </a>
        </div>
        </div>
        <!-- Права частина: Фото користувача -->
        <div class="text-center" style="flex-basis: 300px;">
            <img src="@(!string.IsNullOrEmpty(User.ProfilePicture) ? User.ProfilePicture : "/uploads/deff.jpg")"
                 alt="Profile Picture" class="rounded-circle"
                 style="width: 200px; height: 200px; object-fit: cover; border: 5px solid #9c7fc7;">
            <div class="mt-3">
                @if (string.IsNullOrEmpty(User.ProfilePicture))
                {
                    <div>
                        <InputFile OnChange="HandleFileSelected" />
                        <button class="btn btn-primary btn-sm mt-2" @onclick="UploadProfilePicture">Upload Picture</button>
                    </div>
                }
                else
                {
                    <button class="btn btn-danger btn-sm mt-2" @onclick="RemoveProfilePicture">Remove Picture</button>
                }
            </div>
        </div>
    </div>

    <div style="background-color: #2b1b4e; padding: 1rem; border-radius: 10px; margin-top: 20px; text-align: center; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);">
        <h5 style="color: #e6dbff; font-weight: bold; text-shadow: 0 2px 5px rgba(108, 71, 165, 0.7);">Registered Events</h5>
    </div>
    @if (UserRole == "Admin")
    {
        <div class="text-center mt-4">
            <a href="/account/manageusers" class="btn btn-warning btn-lg d-flex align-items-center justify-content-center gap-2"
               style="background-color: #ffc107; color: black; font-weight: bold; text-transform: uppercase; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);">
                <i class="bi bi-gear"></i> Admin Panel
            </a>
        </div>
    }

    @if (RegisteredEvents == null || !RegisteredEvents.Any())
    {
        <p class="text-muted text-center" style="font-size: 1.2rem;">No registered events found for this user.</p>
    }
    else
    {
        <div class="d-flex flex-wrap gap-4 mt-3 justify-content-center">
            @foreach (var eventItem in RegisteredEvents)
            {
                <div class="card shadow-lg" style="background-color: #2b1b4e; color: #e6dbff; width: 100%; max-width: 400px; border-radius: 10px; border: 1px solid #6c47a5;">
                    <div class="card-body">
                        <h5 class="card-title" style="color: #9c7fc7; font-weight: bold; text-shadow: 0 2px 5px rgba(156, 127, 199, 0.7);">
                            @eventItem.Title
                        </h5>
                        <p class="card-text">
                            <strong>Date:</strong> @eventItem.StartDate.ToString("f") - @eventItem.EndDate.ToString("f")
                        </p>
                        <p class="card-text">
                            <strong>Location:</strong> @eventItem.Location
                        </p>
                        <div class="d-flex justify-content-between">
                            <a href="/event-details/@eventItem.Id" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                            <EditForm Model="eventItem" FormName="Unjoin" OnValidSubmit="() => UnjoinEvent(eventItem.Id)">
                                <button type="submit" class="btn btn-danger btn-sm">
                                    <i class="bi bi-x-circle"></i> Unjoin
                                </button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

   

    <div class="d-flex flex-wrap gap-4 mt-3 justify-content-center">
    @foreach (var eventItem in CreatedEvents)
    {
        <div class="card shadow-lg" style="background-color: #fde8f7; color: #3a236e; width: 100%; max-width: 400px; border-radius: 10px; border: 1px solid #6c47a5;">
            <div class="card-body">
                <h5 class="card-title" style="color: #6c47a5; font-weight: bold; text-shadow: 0 2px 5px rgba(108, 71, 165, 0.7);">
                    @eventItem.Title
                </h5>
                <p class="card-text">
                    <strong>Date:</strong> @eventItem.StartDate.ToString("f") - @eventItem.EndDate.ToString("f")
                </p>
                <p class="card-text">
                    <strong>Location:</strong> @eventItem.Location
                </p>
                <div class="d-flex justify-content-between">
                    <a href="/event-details/@eventItem.Id" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-info-circle"></i> Details
                    </a>
                    <a href="/edit-event/@eventItem.Id" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteEvent(eventItem.Id)">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>
        </div>


        } <div class="text-center mt-4">
            <a href="/events" class="btn btn-primary" style="background-color: #6c47a5; border-color: #3a236e; color: white;">
                <i class="bi bi-arrow-left"></i> Back to Events
            </a>
        </div>
    </div>}
@code {
    private UserViewModel? User;
    private List<EventViewModel> RegisteredEvents = new();
    private IBrowserFile? selectedFile;
    private string UserRole = string.Empty;
    private List<EventViewModel> CreatedEvents = new();

    protected override async Task OnInitializedAsync()
    {
        // Get the currently authenticated user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            // Get user information
            User = await DbContext.Users
                .Where(u => u.Id == userId)
                .Select(u => new UserViewModel
                    {
                        Id = u.Id,
                        Name = u.Name,
                        Email = u.Email,
                        ProfilePicture = u.ProfilePicture
                    })
                .FirstOrDefaultAsync();
            UserRole = await DbContext.UserClaims
                            .Where(c => c.UserId == userId && c.ClaimType == "role")
                            .Select(c => c.ClaimValue)
                            .FirstOrDefaultAsync() ?? "Unknown";


            // Get events for the authenticated user
            var events = await UserEventRepository.GetEventsByUserIdAsync(userId);

            // Map events to EventViewModel
            RegisteredEvents = events.Select(e => new EventViewModel
                {
                    Id = e.Id,
                    Title = e.Title,
                    StartDate = e.StartDate,
                    EndDate = e.EndDate,
                    Location = e.Location
                }).ToList();
          
                var createdEvents = await EventRepository.GetEventsByOrganizerAsync(userId);
           
            CreatedEvents = createdEvents.Select(e => new EventViewModel
                {
                    Id = e.Id,
                    Title = e.Title,
                    StartDate = e.StartDate,
                    EndDate = e.EndDate,
                    Location = e.Location
                }).ToList();


        }
        else
        {
            User = null;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadProfilePicture()
    {
        if (selectedFile != null)
        {
            var filePath = Path.Combine("wwwroot/uploads", $"{Guid.NewGuid()}_{selectedFile.Name}");
            await using var stream = selectedFile.OpenReadStream();
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            // Save the profile picture path to the database
            var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == User.Id);
            if (user != null)
            {
                user.ProfilePicture = $"/uploads/{Path.GetFileName(filePath)}";
                await DbContext.SaveChangesAsync();

                User.ProfilePicture = user.ProfilePicture;
            }
        }
    }

    private async Task RemoveProfilePicture()
    {
        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == User.Id);
        if (user != null)
        {
            user.ProfilePicture = null;
            await DbContext.SaveChangesAsync();

            User.ProfilePicture = null;
        }
    }

    private async Task UnjoinEvent(int eventId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                await UnregisterUserFromEventUseCase.ExecuteAsync(new UserEvent
                    {
                        UserId = userId,
                        EventId = eventId
                    });

                RegisteredEvents.RemoveAll(e => e.Id == eventId);
            }
        }
    }
    private async Task DeleteEvent(int eventId)
    {
        var eventToDelete = CreatedEvents.FirstOrDefault(e => e.Id == eventId);
        if (eventToDelete != null)
        {
            await EventRepository.DeleteEventByIdAsync(eventId); // Передбачається, що цей метод реалізований у вашому репозиторії
            CreatedEvents.Remove(eventToDelete); // Видаляємо подію з локального списку
        }
    }

}

