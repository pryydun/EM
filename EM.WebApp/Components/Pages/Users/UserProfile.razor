@page "/user-profile/{UserId}"
@using EM.WebApp.Components.Pages.ViewModel
@using EM.WebApp.Data
@using EM_UseCases.PluginInterfaces
@using Microsoft.EntityFrameworkCore
@inject IUserEventRepository UserEventRepository
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
 
@if (User == null)

{
    <p class="text-muted text-center">Loading user details...</p>
}

else

{
    <div class="user-profile-container" style="display: flex; gap: 2rem; background-color: #2b1b4e; border-radius: 10px; padding: 2rem; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5); color: #f9f6fc;">
        <!-- Ліва частина: Інформація про користувача -->
        <div style="flex: 2;">
            
            <div style="padding: 1rem; background-color: #3a236e; border-radius: 8px;">
                <h4 style="color: #ffffff; font-size: 1.8rem;">@User.Name</h4>
                <p style="color: #c9bce5;"><strong>Email:</strong> @User.Email</p>
                @if (CanAddNotific)

                {
                    <a href="/create-notification/@User.Id" class="btn btn-outline-secondary btn-sm" style="color: #ffffff; border-color: #9c7fc7; padding: 0.5rem 1rem; transition: 0.3s;">
                        <i class="bi bi-chat"></i> Notify
                    </a>
                }
            </div>
        </div>

        <!-- Права частина: Фото користувача -->
        <div style="flex: 1; display: flex; justify-content: center; align-items: center;">
            <img src="@(string.IsNullOrEmpty(User.ProfilePicture) ? "/uploads/deff.jpg" : User.ProfilePicture)"
                 alt="Profile Picture"
                 class="rounded-circle"
                 style="width: 250px; height: 250px; object-fit: cover; border: 5px solid #9c7fc7;">
        </div>
    </div>
    <br />
    <!-- Список подій -->
    <div style="background: black; padding: 1rem; border-radius: 10px; text-align: center; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin-bottom: 1rem;">
        <h5 style="color: #e6dbff; text-shadow: 0 2px 5px rgba(108, 71, 165, 0.7); font-size: 1.5rem; font-weight: bold;">
            Registered Events
        </h5>
    </div>
    @if (RegisteredEvents == null || !RegisteredEvents.Any())

    {
        <p class="text-muted text-center" style="font-size: 1.2rem;">No registered events found for this user.</p>
    }

    else

    {
        <div class="d-flex flex-wrap justify-content-center gap-4 mt-3" style="padding: 1rem;">
            @foreach (var eventItem in RegisteredEvents)

            {
                <div class="card shadow-lg" style="background-color: #2b1b4e; color: #e6dbff; width: 100%; max-width: 400px; border-radius: 10px; border: 1px solid #6c47a5;">
                    <div class="card-body">
                        <h5 class="card-title" style="color: #9c7fc7; font-weight: bold; text-shadow: 0 2px 5px rgba(156, 127, 199, 0.7);">
                            @eventItem.Title
                        </h5>
                        <p class="card-text">
                            <strong>Date:</strong> @eventItem.StartDate.ToString("f") - @eventItem.EndDate.ToString("f")
                        </p>
                        <p class="card-text">
                            <strong>Location:</strong> @eventItem.Location
                        </p>
                        <div class="text-end">
                            <a href="/event-details/@eventItem.Id" class="btn btn-outline-primary btn-sm"
                               style="color: #9c7fc7; border: 1px solid #9c7fc7; transition: background-color 0.3s;">
                                View Details
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="text-center mt-3">
            <a href="/events" class="btn btn-primary" style="background-color: #6c47a5; border-color: #3a236e; color: white;">
                Back to Events
            </a>
        </div>
    }


}

@code {
    [Parameter]

    public string? UserId { get; set; }



    private UserViewModel? User;

    private List<EventViewModel> RegisteredEvents = new();

    private bool CanAddNotific { get; set; } = false;



    protected override async Task OnInitializedAsync()

    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;



        if (user.Identity?.IsAuthenticated == true)

        {

            CanAddNotific = user.HasClaim("role", "Admin") || user.HasClaim("role", "Organizer");

        }



        // Отримуємо інформацію про користувача

        User = await DbContext.Users

            .Where(u => u.Id == UserId)

            .Select(u => new UserViewModel
                {
                    Id = u.Id,
                    Name = u.Name,
                    Email = u.Email,
                    ProfilePicture = u.ProfilePicture
                })

            .FirstOrDefaultAsync();



        // Отримуємо події через репозиторій

        var events = await UserEventRepository.GetEventsByUserIdAsync(UserId);



        // Перетворюємо Event у EventViewModel

        RegisteredEvents = events.Select(e => new EventViewModel
            {
                Id = e.Id,
                Title = e.Title,
                StartDate = e.StartDate,
                EndDate = e.EndDate,
                Location = e.Location
            }).ToList();

    }
}

