@page "/event-details/{Id:int}"
@using EM.UseCases
@using EM.WebApp.Components.Pages.ViewModel
@using EM.WebApp.Data
@using Microsoft.AspNetCore.Identity
@inject RegisterUserToEventUseCase RegisterUserToEventUseCase
@inject IUnregisterUserFromEventUseCase UnregisterUserFromEventUseCase
@inject IGetUsersByEventIdUseCase GetUsersByEventIdUseCase
@inject IAddReviewUseCase AddReviewUseCase
@inject IDeleteReviewUseCase DeleteReviewUseCase
@inject IGetReviewsByEventIdUseCase GetReviewsByEventIdUseCase
@inject IGetReviewsByEventIdUseCase GetReviewsByEventIdUseCase
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IViewEventByIdUseCase ViewEventByIdUseCase
@rendermode InteractiveServer
<h3>Event Details</h3>

@if (Event == null)
{
    <p>Loading...</p>
}
else
{
    <div id="joinFormContainer">
        <EventCard Event="Event" />
    </div>

    @if (JoinModel != null)
    {
        <EditForm Model="JoinModel" OnValidSubmit="HandleJoinOrUnjoin" FormName="JoinForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (CanJoinEvent)
            {
                <button class="btn btn-success mt-3" type="submit"
                        style="background-color: #28a745;
                               border-color: #1e7e34;
                               font-size: 1rem;
                               font-weight: bold;
                               border-radius: 8px;
                               text-transform: uppercase;
                               color: white;">
                    @JoinButtonText
                </button>
            }
        </EditForm>

        <br />

        @if (JoinModel != null)
        {
            <details style="background-color: #f9f6fc; border-radius: 10px; box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); margin-bottom: 1rem; padding: 10px;">
                <summary style="background-color: #6c47a5; color: white; font-weight: bold; font-size: 1.2rem; text-shadow: 0 2px 5px rgba(58, 35, 110, 0.5); padding: 10px; border-radius: 8px; cursor: pointer;">
                    Registered Users
                </summary>
                <div style="padding: 10px;">
                    @if (RegisteredUsers.Any())
                    {
                        <ul class="list-group" style="background-color: #f2edf7; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                            @foreach (var us in RegisteredUsers)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center"
                                    style="border-bottom: 1px solid #d3bce8; padding: 10px; background-color: #fff; border-radius: 8px;">
                                    <strong style="color: #6c47a5; font-size: 1rem;">@us.Name</strong>
                                    <div class="d-flex gap-2 align-items-center">
                                        <a href="/user-profile/@us.Id" class="btn btn-link"
                                           style="color: #007bff; text-decoration: none;">
                                            View Profile
                                        </a>
                                        @if (CanDelUser)
                                        {
                                            <EditForm Model="us" FormName="DelFromEv" OnValidSubmit="() => RemoveUserFromEvent(us.Id)">
                                                <button type="submit" class="btn btn-outline-danger btn-sm"
                                                        style="transition: background-color 0.3s, color 0.3s;">
                                                    Remove
                                                </button>
                                            </EditForm>
                                        }
                                        @if (CanNotify)
                                        {
                                            <a href="/create-notification/@us.Id" class="btn btn-outline-secondary btn-sm"
                                               style="transition: background-color 0.3s, color 0.3s;">
                                                <i class="bi bi-chat"></i> Notify
                                            </a>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p style="color: #6c47a5; font-size: 1rem;">No users have registered for this event yet.</p>
                    }
                </div>
            </details>
        }

        
    }
}

<details style="background-color: #f9f6fc; border-radius: 10px; box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); margin-bottom: 1rem; padding: 10px;">
    <summary style="background-color: #6c47a5; color: white; font-weight: bold; font-size: 1.2rem; text-shadow: 0 2px 5px rgba(58, 35, 110, 0.5); padding: 10px; border-radius: 8px; cursor: pointer;">
        Reviews
    </summary>
    <div style="padding: 10px;">
        @if (Reviews.Any())
        {
            <ul class="list-group" style="background-color: #f2edf7; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                @foreach (var review in Reviews)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@review.UserName</strong>
                            <div>
                                @for (int i = 0; i < 5; i++)
                                {
                                    if (i < review.Rating)
                                    {
                                        <span class="text-warning">&#9733;</span>
                                    }
                                    else
                                    {
                                        <span class="text-secondary">&#9734;</span>
                                    }
                                }
                            </div>
                            <p>@review.Comment</p>
                        </div>
                        @if (CanDeleteReview)
                        {
                            <EditForm Model="review"
                                      FormName="@($"form-delete-review-{review.Id}")"
                                      OnValidSubmit="@(() => HandleDeleteReview(review.Id))">
                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                            </EditForm>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No reviews available for this event.</p>
        }
    </div>
</details>

@if (ReviewModel != null && CanAddReview)
{
    <div class="card mt-4 shadow-sm" style="border: 2px solid #28a745; border-radius: 10px;">
        <div class="card-header" style="background-color: #28a745; color: white; font-weight: bold; font-size: 1.2rem; text-align: center;">
            <h5>Add Your Review</h5>
        </div>
        <div class="card-body" style="background-color: #f9fff9; padding: 20px;">
            <EditForm Model="ReviewModel" OnValidSubmit="HandleAddReview" FormName="ReviewForm">
                <DataAnnotationsValidator />
                <ValidationSummary style="color: #dc3545; margin-bottom: 1rem;" />

                <div class="form-group mb-3">
                    <label for="rating" class="form-label" style="color: #28a745; font-weight: bold;">Rating (1-5):</label>
                    <div class="form-group mb-3">
                        
                        <InputNumber id="rating" @bind-Value="rating" min="1" max="5" class="form-control" />
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="comment" class="form-label" style="color: #28a745; font-weight: bold;">Comment:</label>
                    <InputTextArea id="comment" placeholder="Type your comment here..." @bind-Value="comment" rows="4" class="form-control" style="border: 1px solid #28a745; border-radius: 5px; padding: 10px;" />
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-success" style="background-color: #28a745; border-color: #1e7e34; font-weight: bold; border-radius: 8px;">
                        <i class="bi bi-check-circle"></i> Submit Review
                    </button>
                    <a href="/events" class="btn btn-secondary" style="background-color: #dfe9df; color: #28a745; font-weight: bold; border-radius: 8px;">
                        <i class="bi bi-arrow-left"></i> Cancel
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
}


    


 
@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private int rating { get; set; }

    [SupplyParameterFromForm]
    private string? comment { get; set; }

    private Event? Event { get; set; }
    private List<User> RegisteredUsers { get; set; } = new();
    private List<Review> Reviews { get; set; } = new();
    private JoinEventViewModel? JoinModel { get; set; }
    private ReviewViewModel? ReviewModel { get; set; }
    private bool IsUserRegistered { get; set; } = false;
    private string JoinButtonText { get; set; } = "Join Event";
    private bool IsAuthenticated { get; set; } = false;
    private bool CanDelUser { get; set; } = false;
    private bool CanJoinEvent { get; set; } = false;
    private bool CanNotify { get; set; } = false;
    private bool CanAddReview { get; set; } = false;
    private bool CanDeleteReview { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Event = await ViewEventByIdUseCase.ExecuteAsync(Id);
        RegisteredUsers = await GetUsersByEventIdUseCase.ExecuteAsync(Id);
        Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);

        if (user?.Identity?.IsAuthenticated == true)
        {
            IsAuthenticated = true;

            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
 
            if (user.HasClaim("role", "Admin"))
            {
                CanDelUser = true;
                CanDeleteReview = true;
            }
            
            else if (user.HasClaim("role", "Organizer") && Event?.OrganizerId == userId)
            {
                CanDelUser = true;
                CanDeleteReview = true;
            }
            if (user.HasClaim("role", "Admin") || (user.HasClaim("role", "Organizer") && Event?.OrganizerId == userId))
            {
                CanNotify = true;
            }

            JoinModel = new JoinEventViewModel
                {
                    UserId = userId,
                    Name = user.Identity.Name,
                    EventId = Id
                };

            ReviewModel = new ReviewViewModel
                {
                    UserId = userId,
                    UserName = user.Identity.Name,
                    EventId = Id,
                    Rating = 0,
                    Comment = string.Empty
                };

            CanJoinEvent = true;
            CanAddReview = true;

            IsUserRegistered = RegisteredUsers.Any(u => u.Name == user.Identity.Name);
            JoinButtonText = IsUserRegistered ? "Unjoin" : "Join Event";
        }
        else
        {
            IsAuthenticated = false;
            CanJoinEvent = false;
        }
    }
    private async Task HandleDeleteReview(int reviewId)
    {
        await DeleteReviewUseCase.ExecuteAsync(reviewId);
        Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);
    }
    private async Task HandleJoinOrUnjoin()
    {
        if (IsUserRegistered)
        {
            await UnregisterUserFromEventUseCase.ExecuteAsync(new UserEvent
                {
                    UserId = JoinModel.UserId,
                    EventId = JoinModel.EventId,
                    Name = JoinModel.Name
                });

            IsUserRegistered = false;
            JoinButtonText = "Join Event";
        }
        else
        {
            await RegisterUserToEventUseCase.ExecuteAsync(new UserEvent
                {
                    UserId = JoinModel.UserId,
                    EventId = JoinModel.EventId,
                    Name = JoinModel.Name
                });

            IsUserRegistered = true;
            JoinButtonText = "Unjoin";
        }

        RegisteredUsers = await GetUsersByEventIdUseCase.ExecuteAsync(Id);
         
    }

    private async Task HandleAddReview()
    {
        if (ReviewModel != null)
        {
            ReviewModel.Rating = rating;
            ReviewModel.Comment = comment;
            await AddReviewUseCase.ExecuteAsync(new Review
                {
                    EventId = ReviewModel.EventId,
                    UserId = ReviewModel.UserId,
                    UserName = ReviewModel.UserName,
                    Rating = ReviewModel.Rating,
                    Comment = ReviewModel.Comment
                });

            Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);
            rating = 0;  
            comment = string.Empty;

            ReviewModel.Rating = 0;
            ReviewModel.Comment = string.Empty;
             
        }
    }

    private async Task RemoveUserFromEvent(string userId)
    {
        await UnregisterUserFromEventUseCase.ExecuteAsync(new UserEvent
            {
                UserId = userId,
                EventId = Id
            });

        RegisteredUsers = await GetUsersByEventIdUseCase.ExecuteAsync(Id);
    }
    private void HandleCancel()
    {
        // Скидання введених даних
        rating = 0;
        comment = string.Empty;

        

        
    }

}






















































































































