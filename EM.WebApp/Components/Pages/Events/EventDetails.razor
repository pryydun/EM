@page "/event-details/{Id:int}"
@using EM.UseCases
@using EM.WebApp.Components.Pages.ViewModel
@using EM.WebApp.Data
@using Microsoft.AspNetCore.Identity
@inject RegisterUserToEventUseCase RegisterUserToEventUseCase
@inject IUnregisterUserFromEventUseCase UnregisterUserFromEventUseCase
@inject IGetUsersByEventIdUseCase GetUsersByEventIdUseCase
@inject IAddReviewUseCase AddReviewUseCase

@inject IGetReviewsByEventIdUseCase GetReviewsByEventIdUseCase
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IViewEventByIdUseCase ViewEventByIdUseCase

<h3>Event Details</h3>

@if (Event == null)
{
    <p>Loading...</p>
}
else
{
    <div id="joinFormContainer">
    <EventCard Event="Event" />
    </div>


   
    @if (JoinModel != null)
    {
        <EditForm Model="JoinModel" OnValidSubmit="HandleJoinOrUnjoin" FormName="JoinForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h5>Registered Users:</h5>
            @if (RegisteredUsers.Any())
            {
                <ul class="list-group">
                    @foreach (var us in RegisteredUsers)
                    {
                        <li class="list-group-item">
                            <strong>@us.Name</strong> (@us.Email)
                            <a href="/user-profile/@us.Id" class="btn btn-link">View Profile</a>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No users have registered for this event yet.</p>
            }
           

            @if (CanJoinEvent)
            {
                <button class="btn btn-primary mt-3" type="submit">
                    @JoinButtonText
                </button>
            }
        </EditForm> 
        }
    
    
   <RewiewList 
        Reviews="Reviews" 
        CanDeleteReview="CanDeleteReview" Id="Id"
        />

    @if (ReviewModel != null && CanAddReview)
    {
        <div class="card mt-4 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5>Add Your Review</h5>
            </div>
            <div class="card-body">

                <div id="reviewFormContainer">
                    <EditForm Model="ReviewModel" OnValidSubmit="HandleAddReview" FormName="ReviewForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="rating" class="form-label"><strong>Rating (1-5):</strong></label>
                            <InputNumber id="rating" @bind-Value="rating" min="1" max="5" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="comment" class="form-label"><strong>Comment:</strong></label>
                            <InputTextArea id="comment" placeholder="Type your comment here..." @bind-Value="comment" rows="4" class="form-control" />
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-check-circle"></i> Submit Review
                            </button>
                            <a href="/events" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Cancel
                            </a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <a href="/events" class="btn btn-secondary mt-3">Back to Events</a>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private int rating { get; set; }

    [SupplyParameterFromForm]
    private string? comment { get; set; }

    private Event? Event { get; set; }
    private List<User> RegisteredUsers { get; set; } = new();
    private List<Review> Reviews { get; set; } = new();
    private JoinEventViewModel? JoinModel { get; set; }
    private ReviewViewModel? ReviewModel { get; set; }
    private bool IsUserRegistered { get; set; } = false;
    private string JoinButtonText { get; set; } = "Join Event";
    private bool IsAuthenticated { get; set; } = false;
    private bool IsAdmin { get; set; } = false;
    private bool IsOrganizer { get; set; } = false;
    private bool CanJoinEvent { get; set; } = false;
    private bool CanAddReview { get; set; } = false;
    private bool CanDeleteReview { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            IsAuthenticated = true;

            CanJoinEvent = user.HasClaim("role", "Admin") || user.HasClaim("role", "Organizer") || user.HasClaim("role", "Participant");
            CanAddReview = CanJoinEvent;
            CanDeleteReview = user.HasClaim("role", "Admin");
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            JoinModel = new JoinEventViewModel
                {
                    UserId = userId,
                    Name = user.Identity.Name,
                    EventId = Id
                };

            ReviewModel = new ReviewViewModel
                {
                    UserId = userId,
                    UserName = user.Identity.Name,
                    EventId = Id,
                    Rating = 0,
                    Comment = string.Empty
                };

            Event = await ViewEventByIdUseCase.ExecuteAsync(Id);
            RegisteredUsers = await GetUsersByEventIdUseCase.ExecuteAsync(Id);
            Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);

            IsUserRegistered = RegisteredUsers.Any(u => u.Name == user.Identity.Name);
            JoinButtonText = IsUserRegistered ? "Unjoin" : "Join Event";
        }
        else
        {
            Event = await ViewEventByIdUseCase.ExecuteAsync(Id);
            RegisteredUsers = await GetUsersByEventIdUseCase.ExecuteAsync(Id);
            Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);
        }
    }

    private async Task HandleJoinOrUnjoin()
    {
        if (IsUserRegistered)
        {
            await UnregisterUserFromEventUseCase.ExecuteAsync(new UserEvent
                {
                    UserId = JoinModel.UserId,
                    EventId = JoinModel.EventId,
                    Name = JoinModel.Name
                });

            IsUserRegistered = false;
            JoinButtonText = "Join Event";
        }
        else
        {
            await RegisterUserToEventUseCase.ExecuteAsync(new UserEvent
                {
                    UserId = JoinModel.UserId,
                    EventId = JoinModel.EventId,
                    Name = JoinModel.Name
                });

            IsUserRegistered = true;
            JoinButtonText = "Unjoin";
        }

        RegisteredUsers = await GetUsersByEventIdUseCase.ExecuteAsync(Id);
        NavigationManager.NavigateTo(NavigationManager.Uri + "#joinFormContainer", forceLoad: false);
    }

    private async Task HandleAddReview()
    {
        if (ReviewModel != null)
        {
            ReviewModel.Rating = rating;
            ReviewModel.Comment = comment;
            await AddReviewUseCase.ExecuteAsync(new Review
                {
                    EventId = ReviewModel.EventId,
                    UserId = ReviewModel.UserId,
                    UserName = ReviewModel.UserName,
                    Rating = ReviewModel.Rating,
                    Comment = ReviewModel.Comment
                });

            Reviews = await GetReviewsByEventIdUseCase.ExecuteAsync(Id);

            ReviewModel.Rating = 0;
            ReviewModel.Comment = string.Empty;
            NavigationManager.NavigateTo(NavigationManager.Uri + "#reviewFormContainer", forceLoad: false);
        }
    }

    
}






















































































































